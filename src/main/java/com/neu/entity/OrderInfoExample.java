package com.neu.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class OrderInfoExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table order_info
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table order_info
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table order_info
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public OrderInfoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table order_info
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andOrderNumberIsNull() {
            addCriterion("order_number is null");
            return (Criteria) this;
        }

        public Criteria andOrderNumberIsNotNull() {
            addCriterion("order_number is not null");
            return (Criteria) this;
        }

        public Criteria andOrderNumberEqualTo(Integer value) {
            addCriterion("order_number =", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberNotEqualTo(Integer value) {
            addCriterion("order_number <>", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberGreaterThan(Integer value) {
            addCriterion("order_number >", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("order_number >=", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberLessThan(Integer value) {
            addCriterion("order_number <", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberLessThanOrEqualTo(Integer value) {
            addCriterion("order_number <=", value, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberIn(List<Integer> values) {
            addCriterion("order_number in", values, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberNotIn(List<Integer> values) {
            addCriterion("order_number not in", values, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberBetween(Integer value1, Integer value2) {
            addCriterion("order_number between", value1, value2, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderNumberNotBetween(Integer value1, Integer value2) {
            addCriterion("order_number not between", value1, value2, "orderNumber");
            return (Criteria) this;
        }

        public Criteria andOrderTimeIsNull() {
            addCriterion("order_time is null");
            return (Criteria) this;
        }

        public Criteria andOrderTimeIsNotNull() {
            addCriterion("order_time is not null");
            return (Criteria) this;
        }

        public Criteria andOrderTimeEqualTo(Date value) {
            addCriterionForJDBCDate("order_time =", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("order_time <>", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeGreaterThan(Date value) {
            addCriterionForJDBCDate("order_time >", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("order_time >=", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeLessThan(Date value) {
            addCriterionForJDBCDate("order_time <", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("order_time <=", value, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeIn(List<Date> values) {
            addCriterionForJDBCDate("order_time in", values, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("order_time not in", values, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("order_time between", value1, value2, "orderTime");
            return (Criteria) this;
        }

        public Criteria andOrderTimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("order_time not between", value1, value2, "orderTime");
            return (Criteria) this;
        }

        public Criteria andCommodityIsNull() {
            addCriterion("goods_number is null");
            return (Criteria) this;
        }

        public Criteria andCommodityIsNotNull() {
            addCriterion("goods_number is not null");
            return (Criteria) this;
        }

        public Criteria andCommodityEqualTo(Commodity value) {
            addCriterion("goods_number =", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityNotEqualTo(Commodity value) {
            addCriterion("goods_number <>", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityGreaterThan(Commodity value) {
            addCriterion("goods_number >", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityGreaterThanOrEqualTo(Commodity value) {
            addCriterion("goods_number >=", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityLessThan(Commodity value) {
            addCriterion("goods_number <", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityLessThanOrEqualTo(Commodity value) {
            addCriterion("goods_number <=", value, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityIn(List<Commodity> values) {
            addCriterion("goods_number in", values, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityNotIn(List<Commodity> values) {
            addCriterion("goods_number not in", values, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityBetween(Commodity value1, Commodity value2) {
            addCriterion("goods_number between", value1, value2, "commodity");
            return (Criteria) this;
        }

        public Criteria andCommodityNotBetween(Commodity value1, Commodity value2) {
            addCriterion("goods_number not between", value1, value2, "commodity");
            return (Criteria) this;
        }

        public Criteria andUserIsNull() {
            addCriterion("user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIsNotNull() {
            addCriterion("user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserEqualTo(User value) {
            addCriterion("user_id =", value.getId(), "user");
            return (Criteria) this;
        }

        public Criteria andUserNotEqualTo(User value) {
            addCriterion("user_id <>", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThan(User value) {
            addCriterion("user_id >", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThanOrEqualTo(User value) {
            addCriterion("user_id >=", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserLessThan(User value) {
            addCriterion("user_id <", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserLessThanOrEqualTo(User value) {
            addCriterion("user_id <=", value, "user");
            return (Criteria) this;
        }

        public Criteria andUserIn(List<User> values) {
            addCriterion("user_id in", values, "user");
            return (Criteria) this;
        }

        public Criteria andUserNotIn(List<User> values) {
            addCriterion("user_id not in", values, "user");
            return (Criteria) this;
        }

        public Criteria andUserBetween(User value1, User value2) {
            addCriterion("user_id between", value1, value2, "user");
            return (Criteria) this;
        }

        public Criteria andUserNotBetween(User value1, User value2) {
            addCriterion("user_id not between", value1, value2, "user");
            return (Criteria) this;
        }

        public Criteria andAmountIsNull() {
            addCriterion("amount is null");
            return (Criteria) this;
        }

        public Criteria andAmountIsNotNull() {
            addCriterion("amount is not null");
            return (Criteria) this;
        }

        public Criteria andAmountEqualTo(Double value) {
            addCriterion("amount =", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotEqualTo(Double value) {
            addCriterion("amount <>", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThan(Double value) {
            addCriterion("amount >", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThanOrEqualTo(Double value) {
            addCriterion("amount >=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThan(Double value) {
            addCriterion("amount <", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThanOrEqualTo(Double value) {
            addCriterion("amount <=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountIn(List<Double> values) {
            addCriterion("amount in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotIn(List<Double> values) {
            addCriterion("amount not in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountBetween(Double value1, Double value2) {
            addCriterion("amount between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotBetween(Double value1, Double value2) {
            addCriterion("amount not between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andConstantItem1IsNull() {
            addCriterion("status1 is null");
            return (Criteria) this;
        }

        public Criteria andConstantItem1IsNotNull() {
            addCriterion("status1 is not null");
            return (Criteria) this;
        }

        public Criteria andConstantItem1EqualTo(ConstantItem value) {
            addCriterion("status1 =", value.getId(), "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1NotEqualTo(ConstantItem value) {
            addCriterion("status1 <>", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1GreaterThan(ConstantItem value) {
            addCriterion("status1 >", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1GreaterThanOrEqualTo(ConstantItem value) {
            addCriterion("status1 >=", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1LessThan(ConstantItem value) {
            addCriterion("status1 <", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1LessThanOrEqualTo(ConstantItem value) {
            addCriterion("status1 <=", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1Like(ConstantItem value) {
            addCriterion("status1 like", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1NotLike(ConstantItem value) {
            addCriterion("status1 not like", value, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1In(List<ConstantItem> values) {
            addCriterion("status1 in", values, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1NotIn(List<ConstantItem> values) {
            addCriterion("status1 not in", values, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1Between(ConstantItem value1, ConstantItem value2) {
            addCriterion("status1 between", value1, value2, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem1NotBetween(ConstantItem value1, ConstantItem value2) {
            addCriterion("status1 not between", value1, value2, "constantItem1");
            return (Criteria) this;
        }

        public Criteria andConstantItem2IsNull() {
            addCriterion("status2 is null");
            return (Criteria) this;
        }

        public Criteria andConstantItem2IsNotNull() {
            addCriterion("status2 is not null");
            return (Criteria) this;
        }

        public Criteria andConstantItem2EqualTo(ConstantItem value) {
            addCriterion("status2 =", value.getId(), "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2NotEqualTo(ConstantItem value) {
            addCriterion("status2 <>", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2GreaterThan(ConstantItem value) {
            addCriterion("status2 >", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2GreaterThanOrEqualTo(ConstantItem value) {
            addCriterion("status2 >=", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2LessThan(ConstantItem value) {
            addCriterion("status2 <", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2LessThanOrEqualTo(ConstantItem value) {
            addCriterion("status2 <=", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2Like(ConstantItem value) {
            addCriterion("status2 like", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2NotLike(ConstantItem value) {
            addCriterion("status2 not like", value, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2In(List<ConstantItem> values) {
            addCriterion("status2 in", values, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2NotIn(List<ConstantItem> values) {
            addCriterion("status2 not in", values, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2Between(ConstantItem value1, ConstantItem value2) {
            addCriterion("status2 between", value1, value2, "constantItem2");
            return (Criteria) this;
        }

        public Criteria andConstantItem2NotBetween(ConstantItem value1, ConstantItem value2) {
            addCriterion("status2 not between", value1, value2, "constantItem2");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table order_info
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table order_info
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}